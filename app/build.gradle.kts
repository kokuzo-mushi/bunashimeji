plugins {
    id ("java")
    id ("application")
}

application {
    mainClass = ("com.group_finity.buna-shimeji.Main")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.slf4j:slf4j-api:2.0.16")
    implementation("org.apache.commons:commons-lang3:3.14.0")
    implementation("org.graalvm.js:js:25.0.0")

    // --- JUnit 5 (Jupiter) ---
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.3")
    // ✅ テストランナー（JUnit Platform Launcher）を明示的に追加
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.10.3")
}

tasks.withType<JavaExec>().configureEach {
    jvmArgs("--enable-preview")
}

// ✅ JUnit Platform を使うよう指定（重要）
tasks.test {
    useJUnitPlatform()
}

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
*/